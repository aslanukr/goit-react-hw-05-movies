{"version":3,"file":"static/js/387.ed17a70f.chunk.js","mappings":"+TAEaA,EAAWC,EAAAA,GAAAA,GAAH,mFAMRC,EAAWD,EAAAA,GAAAA,GAAH,gFAMRE,EAAQF,EAAAA,GAAAA,IAAH,wFAMLG,EAAQH,EAAAA,GAAAA,IAAH,8CAILI,EAAYJ,EAAAA,GAAAA,KAAH,6CAITK,EAAYL,EAAAA,GAAAA,KAAH,kE,mBCdTM,EAAO,WAClB,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAaC,EAAAA,EAAAA,MAAbD,SAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdR,GAAa,GAFC,UAGKS,EAAAA,EAAAA,IAAQJ,GAHb,OAGRJ,EAHQ,OAIdC,EAAQD,GAJM,gDAMdG,EAAS,KAAMM,SACfC,QAAQC,IAAI,KAAMF,SAPJ,yBASdV,GAAa,GATC,4EAAH,qDAafQ,GACD,GAAE,CAACH,KAGF,gCACGN,IAAa,SAACc,EAAA,EAAD,IACbV,IAAS,uBAAIA,KACZA,IAAa,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMa,QAAS,GACxB,SAACxB,EAAD,UACGW,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAAC3B,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CACE0B,MAAO,CAAEC,MAAO,SAChBC,IACEH,EAAY,0CAC2BA,GACnCI,EAENC,IAAKP,OAGT,SAACtB,EAAD,UAAYsB,IAAiB,KAAG,KAChC,UAACrB,EAAD,WAAW,IAAEsB,EAAU,SAbVF,EADP,OAmBZ,uBAAG,iDAIV,EAED,G,mMCjEMS,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAW,mCAAG,oGACFC,EAAAA,EAAAA,IACrB,+DACAN,GAHuB,cACnBO,EADmB,yBAKlBA,EAASC,KAAKC,SALI,2CAAH,qDAQXC,EAAS,mCAAG,WAAMC,GAAN,uFACAL,EAAAA,EAAAA,IAAA,0DAC8BK,EAD9B,8CAErBX,GAHqB,cACjBO,EADiB,yBAKhBA,EAASC,KAAKC,SALE,2CAAH,sDAQTG,EAAY,mCAAG,WAAMhC,GAAN,uFACH0B,EAAAA,EAAAA,IAAA,6CACiB1B,EADjB,mBAErBoB,GAHwB,cACpBO,EADoB,yBAKnBA,EAASC,MALU,2CAAH,sDAQZxB,EAAO,mCAAG,WAAMJ,GAAN,uFACE0B,EAAAA,EAAAA,IAAA,6CACiB1B,EADjB,2BAErBoB,GAHmB,cACfO,EADe,yBAKdA,EAASC,KAAKhC,MALA,2CAAH,sDAQPqC,EAAU,mCAAG,WAAMjC,GAAN,uFACD0B,EAAAA,EAAAA,IAAA,6CACiB1B,EADjB,kCAErBoB,GAHsB,cAClBO,EADkB,yBAKjBA,EAASC,KAAKC,SALG,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n`;\n\nexport const Thumb = styled.div`\n  display: block;\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nexport const Image = styled.img`\n  object-fit: cover;\n`;\n\nexport const ActorName = styled.span`\n  font-weight: 700;\n`;\n\nexport const Character = styled.span`\n  font-style: italic;\n  color: #bd7c15;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/api';\nimport {\n  ActorName,\n  CastItem,\n  CastList,\n  Character,\n  Image,\n  Thumb,\n} from './Cast.styled';\nimport PosterPlaceholder from '../../images/poster-placeholder.png';\n\nexport const Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  const { movie_id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        const cast = await getCast(movie_id);\n        setCast(cast);\n      } catch (error) {\n        setError(error.message);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movie_id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {!error && cast?.length > 0 ? (\n        <CastList>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <CastItem key={id}>\n              <Thumb>\n                <Image\n                  style={{ width: '100px' }}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w300/${profile_path}`\n                      : PosterPlaceholder\n                  }\n                  alt={name}\n                />\n              </Thumb>\n              <ActorName>{name}</ActorName> -{' '}\n              <Character>\"{character}\"</Character>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <p>We don't have any cast info for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\n// const API_KEY = '8efa744d01468dd41fac44eaa859e834';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ZWZhNzQ0ZDAxNDY4ZGQ0MWZhYzQ0ZWFhODU5ZTgzNCIsInN1YiI6IjY0NzBkZWQyMzM2ZTAxMDBhYWUwZDAwMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Kj3f9MgwcJwqZWcXrgfWqjiiEMuo7IcJ2XaoXJsAKQw',\n  },\n};\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovieById = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getCast = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/credits?language=en-US`,\n    options\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/reviews?language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n"],"names":["CastList","styled","CastItem","Thumb","Image","ActorName","Character","Cast","useState","isLoading","setIsLoading","cast","setCast","error","setError","movie_id","useParams","useEffect","fetchCast","getCast","message","console","log","Loader","length","map","id","name","character","profile_path","style","width","src","PosterPlaceholder","alt","options","method","headers","accept","Authorization","getTrending","axios","response","data","results","getMovies","query","getMovieById","getReviews"],"sourceRoot":""}