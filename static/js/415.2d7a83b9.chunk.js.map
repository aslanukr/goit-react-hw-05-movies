{"version":3,"file":"static/js/415.2d7a83b9.chunk.js","mappings":"4LA2DA,IA9CmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,UACGF,EACEG,QAAO,SAAAC,GAAK,OAAIA,EAAMC,KAAV,IACZC,KAAI,gBAAGC,EAAH,EAAGA,GAAIF,EAAP,EAAOA,MAAOG,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OACH,SAAC,KAAD,WACE,UAAC,KAAD,CACEC,GAAE,kBAAaH,GACfI,MAAO,CACLC,KAAMX,GAHV,WAME,SAAC,KAAD,WACE,SAAC,KAAD,CACEY,IACEL,EAAW,UACJM,EAAAA,GADI,gBACiBN,GACxBO,EAENC,IAAKX,OAGT,UAAC,KAAD,WACGA,EACAI,GAAY,YAASA,EAAaQ,MAAM,EAAG,GAA/B,YAnBJV,EADZ,KA2BZ,C,uPC3CYW,EAAYC,EAAAA,GAAAA,GAAH,mLAWTC,EAAcD,EAAAA,GAAAA,GAAH,wGAOXE,EAAWF,EAAAA,GAAAA,GAAH,iZAsBRG,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,+CAITK,EAAmBL,EAAAA,GAAAA,IAAH,4CAIhBM,EAAQN,EAAAA,GAAAA,IAAH,wFAMLO,EAASP,EAAAA,GAAAA,IAAH,6C,mICbnB,UAtCa,WACX,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAO3B,EAAP,KAAe4B,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,oGAElBF,GAAa,GAFK,UAGCG,EAAAA,EAAAA,MAHD,OAGZC,EAHY,OAIlBR,EAAUQ,GAJQ,gDAMlBN,EAAS,KAAMO,SACfC,QAAQC,IAAI,KAAMF,SAPA,yBASlBL,GAAa,GATK,4EAAH,qDAanBE,GACD,GAAE,KAGD,2BACGH,IAAa,SAAC,IAAD,KACd,SAAC,KAAD,UAAW,oBACTF,GAAS7B,GACT,SAAC,IAAD,CAAYA,OAAQA,KAEpB,uBAAG,oFAOV,C,2NCtCKwC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOT,EAAW,mCAAG,oGACFU,EAAAA,EAAAA,IACrB,+DACAL,GAHuB,cACnBM,EADmB,yBAKlBA,EAASV,KAAKW,SALI,2CAAH,qDAQXC,EAAS,mCAAG,WAAMC,GAAN,uFACAJ,EAAAA,EAAAA,IAAA,0DAC8BI,EAD9B,8CAErBT,GAHqB,cACjBM,EADiB,yBAKhBA,EAASV,KAAKW,SALE,2CAAH,sDAQTG,EAAY,mCAAG,WAAMC,GAAN,uFACHN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,mBAErBX,GAHwB,cACpBM,EADoB,yBAKnBA,EAASV,MALU,2CAAH,sDAQZgB,EAAO,mCAAG,WAAMD,GAAN,uFACEN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,2BAErBX,GAHmB,cACfM,EADe,yBAKdA,EAASV,KAAKiB,MALA,2CAAH,sDAQPC,EAAU,mCAAG,WAAMH,GAAN,uFACDN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,kCAErBX,GAHsB,cAClBM,EADkB,yBAKjBA,EAASV,KAAKW,SALG,2CAAH,sDAQVjC,EAAgB,6B","sources":["components/MoviesList/MoviesList.jsx","components/MoviesList/MoviesList.styled.js","pages/Home.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport {\n  GalleryList,\n  ListItem,\n  MovieInfoWrapper,\n  MovieLink,\n  Poster,\n  Thumb,\n} from './MoviesList.styled';\nimport PosterPlaceholder from '../../images/poster-placeholder.png';\nimport { posterBaseURL } from 'services/api';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <GalleryList>\n      {movies\n        .filter(movie => movie.title)\n        .map(({ id, title, poster_path, release_date }) => (\n          <ListItem key={id}>\n            <MovieLink\n              to={`/movies/${id}`}\n              state={{\n                from: location,\n              }}\n            >\n              <Thumb>\n                <Poster\n                  src={\n                    poster_path\n                      ? `${posterBaseURL}w500/${poster_path}`\n                      : PosterPlaceholder\n                  }\n                  alt={title}\n                />\n              </Thumb>\n              <MovieInfoWrapper>\n                {title}\n                {release_date && ` (${release_date.slice(0, 4)})`}\n              </MovieInfoWrapper>\n            </MovieLink>\n          </ListItem>\n        ))}\n    </GalleryList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const PageTitle = styled.h1`\n  margin-bottom: 20px;\n  font-size: 30px;\n  font-weight: 700;\n  color: #ffffff;\n\n  @media screen and (min-width: 480px) {\n    font-size: 40px;\n  }\n`;\n\nexport const GalleryList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 18px;\n  border-radius: 5px;\n  scale: 1;\n\n  transition: scale 250ms ease-in;\n\n  &:hover,\n  &:focus {\n    scale: 1.05;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 10px * (4 - 1)) / (4));\n  }\n  @media screen and (min-width: 1200px) {\n    width: calc((100% - 10px * (6 - 1)) / (6));\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  text-align: center;\n`;\n\nexport const MovieInfoWrapper = styled.div`\n  padding: 20px 0;\n`;\n\nexport const Thumb = styled.div`\n  display: block;\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nexport const Poster = styled.img`\n  object-fit: cover;\n`;\n","import { getTrending } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { PageTitle } from 'components/MoviesList/MoviesList.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchTrending = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getTrending();\n        setMovies(data);\n      } catch (error) {\n        setError(error.message);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTrending();\n  }, []);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      <PageTitle>Trending Today</PageTitle>\n      {!error && movies ? (\n        <MoviesList movies={movies} />\n      ) : (\n        <p>\n          Sorry! No trending movies were found! Try to search for movies on\n          Movies Page\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\n// const API_KEY = '8efa744d01468dd41fac44eaa859e834';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ZWZhNzQ0ZDAxNDY4ZGQ0MWZhYzQ0ZWFhODU5ZTgzNCIsInN1YiI6IjY0NzBkZWQyMzM2ZTAxMDBhYWUwZDAwMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Kj3f9MgwcJwqZWcXrgfWqjiiEMuo7IcJ2XaoXJsAKQw',\n  },\n};\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovieById = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getCast = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/credits?language=en-US`,\n    options\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/reviews?language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const posterBaseURL = 'https://image.tmdb.org/t/p/';\n"],"names":["movies","location","useLocation","filter","movie","title","map","id","poster_path","release_date","to","state","from","src","posterBaseURL","PosterPlaceholder","alt","slice","PageTitle","styled","GalleryList","ListItem","MovieLink","Link","MovieInfoWrapper","Thumb","Poster","useState","setMovies","error","setError","isLoading","setIsLoading","useEffect","fetchTrending","getTrending","data","message","console","log","options","method","headers","accept","Authorization","axios","response","results","getMovies","query","getMovieById","movie_id","getCast","cast","getReviews"],"sourceRoot":""}