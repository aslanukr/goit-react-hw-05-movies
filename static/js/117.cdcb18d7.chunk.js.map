{"version":3,"file":"static/js/117.cdcb18d7.chunk.js","mappings":"uWAGaA,EAAYC,EAAAA,GAAAA,GAAH,mLAWTC,EAAcD,EAAAA,GAAAA,GAAH,wGAOXE,EAAWF,EAAAA,GAAAA,GAAH,iZAsBRG,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,+CAITK,EAAmBL,EAAAA,GAAAA,IAAH,4CAIhBM,EAAQN,EAAAA,GAAAA,IAAH,wFAMLO,EAASP,EAAAA,GAAAA,IAAH,6C,mLCKnB,EAjDiB,SAAC,GAA0B,IAAxBQ,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC1B,OACE,iCACE,SAAC,KAAD,UAAW,oBACX,SAAC,KAAD,UACGD,EACEE,QAAO,SAAAC,GAAK,OAAIA,EAAMC,KAAV,IACZC,KAAI,gBAAGC,EAAH,EAAGA,GAAIF,EAAP,EAAOA,MAAOG,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OACH,SAAC,KAAD,WACE,UAAC,KAAD,CACEC,GAAE,kBAAaH,GACfI,MAAO,CACLC,KAAMV,GAHV,WAME,SAAC,KAAD,WACE,SAAC,KAAD,CACEW,IACEL,EAAW,0CAC4BA,GACnCM,EAENC,IAAKV,OAGT,UAAC,KAAD,WACGA,EACAI,GAAY,YAASA,EAAaO,MAAM,EAAG,GAA/B,YAnBJT,EADZ,QA4Bd,ECJD,EAtCa,WACX,IAAML,GAAWe,EAAAA,EAAAA,MACjB,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,oGAElBF,GAAa,GAFK,UAGCG,EAAAA,EAAAA,MAHD,OAGZC,EAHY,OAIlBR,EAAYQ,GAJM,gDAMlBN,EAAS,KAAMO,SACfC,QAAQC,IAAI,KAAMF,SAPA,yBASlBL,GAAa,GATK,4EAAH,qDAanBE,GACD,GAAE,KAGD,2BACGH,IAAa,SAACS,EAAA,EAAD,KACZX,GAASF,GACT,SAAC,EAAD,CAAUlB,OAAQkB,EAAUjB,SAAUA,KAEtC,uBAAG,oFAOV,C,mMCtCK+B,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOV,EAAW,mCAAG,oGACFW,EAAAA,EAAAA,IACrB,+DACAL,GAHuB,cACnBM,EADmB,yBAKlBA,EAASX,KAAKY,SALI,2CAAH,qDAQXC,EAAS,mCAAG,WAAMC,GAAN,uFACAJ,EAAAA,EAAAA,IAAA,0DAC8BI,EAD9B,8CAErBT,GAHqB,cACjBM,EADiB,yBAKhBA,EAASX,KAAKY,SALE,2CAAH,sDAQTG,EAAY,mCAAG,WAAMC,GAAN,uFACHN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,mBAErBX,GAHwB,cACpBM,EADoB,yBAKnBA,EAASX,MALU,2CAAH,sDAQZiB,EAAO,mCAAG,WAAMD,GAAN,uFACEN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,2BAErBX,GAHmB,cACfM,EADe,yBAKdA,EAASX,KAAKkB,MALA,2CAAH,sDAQPC,EAAU,mCAAG,WAAMH,GAAN,uFACDN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,kCAErBX,GAHsB,cAClBM,EADkB,yBAKjBA,EAASX,KAAKY,SALG,2CAAH,qD","sources":["components/Galleries/Gallery.styled.js","components/Galleries/Trending/Trending.jsx","pages/Home.jsx","services/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const PageTitle = styled.h1`\n  margin-bottom: 20px;\n  font-size: 30px;\n  font-weight: 700;\n  color: #ffffff;\n\n  @media screen and (min-width: 480px) {\n    font-size: 40px;\n  }\n`;\n\nexport const GalleryList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 18px;\n  border-radius: 5px;\n  scale: 1;\n\n  transition: scale 250ms ease-in;\n\n  &:hover,\n  &:focus {\n    scale: 1.05;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 10px * (4 - 1)) / (4));\n  }\n  @media screen and (min-width: 1200px) {\n    width: calc((100% - 10px * (6 - 1)) / (6));\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  text-align: center;\n`;\n\nexport const MovieInfoWrapper = styled.div`\n  padding: 20px 0;\n`;\n\nexport const Thumb = styled.div`\n  display: block;\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nexport const Poster = styled.img`\n  object-fit: cover;\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  MovieInfoWrapper,\n  Poster,\n  Thumb,\n  ListItem,\n  GalleryList,\n  MovieLink,\n  PageTitle,\n} from '../Gallery.styled';\nimport PosterPlaceholder from '../../../images/poster-placeholder.png';\n\nconst Trending = ({ movies, location }) => {\n  return (\n    <>\n      <PageTitle>Trending Today</PageTitle>\n      <GalleryList>\n        {movies\n          .filter(movie => movie.title)\n          .map(({ id, title, poster_path, release_date }) => (\n            <ListItem key={id}>\n              <MovieLink\n                to={`/movies/${id}`}\n                state={{\n                  from: location,\n                }}\n              >\n                <Thumb>\n                  <Poster\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : PosterPlaceholder\n                    }\n                    alt={title}\n                  />\n                </Thumb>\n                <MovieInfoWrapper>\n                  {title}\n                  {release_date && ` (${release_date.slice(0, 4)})`}\n                </MovieInfoWrapper>\n              </MovieLink>\n            </ListItem>\n          ))}\n      </GalleryList>\n    </>\n  );\n};\n\nTrending.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default Trending;\n","import { getTrending } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport Trending from 'components/Galleries/Trending/Trending';\n\nconst Home = () => {\n  const location = useLocation();\n  const [trending, setTrending] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchTrending = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getTrending();\n        setTrending(data);\n      } catch (error) {\n        setError(error.message);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTrending();\n  }, []);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {!error && trending ? (\n        <Trending movies={trending} location={location} />\n      ) : (\n        <p>\n          Sorry! No trending movies were found! Try to search for movies on\n          Movies Page\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\n// const API_KEY = '8efa744d01468dd41fac44eaa859e834';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ZWZhNzQ0ZDAxNDY4ZGQ0MWZhYzQ0ZWFhODU5ZTgzNCIsInN1YiI6IjY0NzBkZWQyMzM2ZTAxMDBhYWUwZDAwMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Kj3f9MgwcJwqZWcXrgfWqjiiEMuo7IcJ2XaoXJsAKQw',\n  },\n};\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovieById = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getCast = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/credits?language=en-US`,\n    options\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/reviews?language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n"],"names":["PageTitle","styled","GalleryList","ListItem","MovieLink","Link","MovieInfoWrapper","Thumb","Poster","movies","location","filter","movie","title","map","id","poster_path","release_date","to","state","from","src","PosterPlaceholder","alt","slice","useLocation","useState","trending","setTrending","error","setError","isLoading","setIsLoading","useEffect","fetchTrending","getTrending","data","message","console","log","Loader","options","method","headers","accept","Authorization","axios","response","results","getMovies","query","getMovieById","movie_id","getCast","cast","getReviews"],"sourceRoot":""}