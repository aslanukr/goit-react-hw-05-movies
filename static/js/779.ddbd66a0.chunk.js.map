{"version":3,"file":"static/js/779.ddbd66a0.chunk.js","mappings":"4TAEaA,EAAcC,EAAAA,GAAAA,GAAH,mFAMXC,EAASD,EAAAA,GAAAA,EAAH,gEAKNE,EAASF,EAAAA,GAAAA,EAAH,+C,SCPNG,EAAU,WACrB,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAaC,EAAAA,EAAAA,MAAbD,SAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBR,GAAa,GAFI,UAGKS,EAAAA,EAAAA,IAAWJ,GAHhB,OAGXJ,EAHW,OAIjBC,EAAWD,GAJM,gDAMjBG,EAAS,KAAMM,SACfC,QAAQC,IAAI,KAAMF,SAPD,yBASjBV,GAAa,GATI,4EAAH,qDAalBQ,GACD,GAAE,CAACH,KAGF,gCACGN,IAAa,SAACc,EAAA,EAAD,IACbV,IAAS,uBAAIA,KACN,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASa,QAAS,GACjB,SAACrB,EAAD,UACGQ,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,SAACvB,EAAD,UAASsB,KACT,SAACrB,EAAD,UAASsB,MAFFF,EADE,OAQf,SAACpB,EAAD,UAAQ,+CAIf,EAED,G,mMC9CMuB,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAW,mCAAG,oGACFC,EAAAA,EAAAA,IACrB,+DACAN,GAHuB,cACnBO,EADmB,yBAKlBA,EAASC,KAAKC,SALI,2CAAH,qDAQXC,EAAS,mCAAG,WAAMC,GAAN,uFACAL,EAAAA,EAAAA,IAAA,0DAC8BK,EAD9B,8CAErBX,GAHqB,cACjBO,EADiB,yBAKhBA,EAASC,KAAKC,SALE,2CAAH,sDAQTG,EAAY,mCAAG,WAAM1B,GAAN,uFACHoB,EAAAA,EAAAA,IAAA,6CACiBpB,EADjB,mBAErBc,GAHwB,cACpBO,EADoB,yBAKnBA,EAASC,MALU,2CAAH,sDAQZK,EAAO,mCAAG,WAAM3B,GAAN,uFACEoB,EAAAA,EAAAA,IAAA,6CACiBpB,EADjB,2BAErBc,GAHmB,cACfO,EADe,yBAKdA,EAASC,KAAKM,MALA,2CAAH,sDAQPxB,EAAU,mCAAG,WAAMJ,GAAN,uFACDoB,EAAAA,EAAAA,IAAA,6CACiBpB,EADjB,kCAErBc,GAHsB,cAClBO,EADkB,yBAKjBA,EAASC,KAAKC,SALG,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const Author = styled.p`\n  font-weight: 700;\n  color: #bd7c15;\n`;\n\nexport const Review = styled.p`\n  font-style: italic;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'services/api';\nimport { Author, Review, ReviewsList } from './Reviews.styled';\n\nexport const Reviews = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  const { movie_id } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const reviews = await getReviews(movie_id);\n        setReviews(reviews);\n      } catch (error) {\n        setError(error.message);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [movie_id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {reviews?.length > 0 ? (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <Author>{author}</Author>\n              <Review>{content}</Review>\n            </li>\n          ))}\n        </ReviewsList>\n      ) : (\n        <Review>We don't have any reviews for this movie</Review>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\n// const API_KEY = '8efa744d01468dd41fac44eaa859e834';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ZWZhNzQ0ZDAxNDY4ZGQ0MWZhYzQ0ZWFhODU5ZTgzNCIsInN1YiI6IjY0NzBkZWQyMzM2ZTAxMDBhYWUwZDAwMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Kj3f9MgwcJwqZWcXrgfWqjiiEMuo7IcJ2XaoXJsAKQw',\n  },\n};\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const getMovieById = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getCast = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/credits?language=en-US`,\n    options\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movie_id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/reviews?language=en-US&page=1`,\n    options\n  );\n  return response.data.results;\n};\n"],"names":["ReviewsList","styled","Author","Review","Reviews","useState","isLoading","setIsLoading","reviews","setReviews","error","setError","movie_id","useParams","useEffect","fetchReviews","getReviews","message","console","log","Loader","length","map","id","author","content","options","method","headers","accept","Authorization","getTrending","axios","response","data","results","getMovies","query","getMovieById","getCast","cast"],"sourceRoot":""}